// Code generated by go-swagger; DO NOT EDIT.

package tools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yhsiang/f2pool-challenge/models"
)

// ValidateIPOKCode is the HTTP code returned for type ValidateIPOK
const ValidateIPOKCode int = 200

/*
ValidateIPOK OK

swagger:response validateIpOK
*/
type ValidateIPOK struct {

	/*
	  In: Body
	*/
	Payload *models.HandlerValidateIPResponse `json:"body,omitempty"`
}

// NewValidateIPOK creates ValidateIPOK with default headers values
func NewValidateIPOK() *ValidateIPOK {

	return &ValidateIPOK{}
}

// WithPayload adds the payload to the validate Ip o k response
func (o *ValidateIPOK) WithPayload(payload *models.HandlerValidateIPResponse) *ValidateIPOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the validate Ip o k response
func (o *ValidateIPOK) SetPayload(payload *models.HandlerValidateIPResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ValidateIPOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ValidateIPBadRequestCode is the HTTP code returned for type ValidateIPBadRequest
const ValidateIPBadRequestCode int = 400

/*
ValidateIPBadRequest Bad Request

swagger:response validateIpBadRequest
*/
type ValidateIPBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.UtilsHTTPError `json:"body,omitempty"`
}

// NewValidateIPBadRequest creates ValidateIPBadRequest with default headers values
func NewValidateIPBadRequest() *ValidateIPBadRequest {

	return &ValidateIPBadRequest{}
}

// WithPayload adds the payload to the validate Ip bad request response
func (o *ValidateIPBadRequest) WithPayload(payload *models.UtilsHTTPError) *ValidateIPBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the validate Ip bad request response
func (o *ValidateIPBadRequest) SetPayload(payload *models.UtilsHTTPError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ValidateIPBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
