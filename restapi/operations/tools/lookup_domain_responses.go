// Code generated by go-swagger; DO NOT EDIT.

package tools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yhsiang/f2pool-challenge/models"
)

// LookupDomainOKCode is the HTTP code returned for type LookupDomainOK
const LookupDomainOKCode int = 200

/*
LookupDomainOK OK

swagger:response lookupDomainOK
*/
type LookupDomainOK struct {

	/*
	  In: Body
	*/
	Payload *models.ModelQuery `json:"body,omitempty"`
}

// NewLookupDomainOK creates LookupDomainOK with default headers values
func NewLookupDomainOK() *LookupDomainOK {

	return &LookupDomainOK{}
}

// WithPayload adds the payload to the lookup domain o k response
func (o *LookupDomainOK) WithPayload(payload *models.ModelQuery) *LookupDomainOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the lookup domain o k response
func (o *LookupDomainOK) SetPayload(payload *models.ModelQuery) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LookupDomainOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LookupDomainBadRequestCode is the HTTP code returned for type LookupDomainBadRequest
const LookupDomainBadRequestCode int = 400

/*
LookupDomainBadRequest Bad Request

swagger:response lookupDomainBadRequest
*/
type LookupDomainBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.UtilsHTTPError `json:"body,omitempty"`
}

// NewLookupDomainBadRequest creates LookupDomainBadRequest with default headers values
func NewLookupDomainBadRequest() *LookupDomainBadRequest {

	return &LookupDomainBadRequest{}
}

// WithPayload adds the payload to the lookup domain bad request response
func (o *LookupDomainBadRequest) WithPayload(payload *models.UtilsHTTPError) *LookupDomainBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the lookup domain bad request response
func (o *LookupDomainBadRequest) SetPayload(payload *models.UtilsHTTPError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LookupDomainBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LookupDomainNotFoundCode is the HTTP code returned for type LookupDomainNotFound
const LookupDomainNotFoundCode int = 404

/*
LookupDomainNotFound Not Found

swagger:response lookupDomainNotFound
*/
type LookupDomainNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.UtilsHTTPError `json:"body,omitempty"`
}

// NewLookupDomainNotFound creates LookupDomainNotFound with default headers values
func NewLookupDomainNotFound() *LookupDomainNotFound {

	return &LookupDomainNotFound{}
}

// WithPayload adds the payload to the lookup domain not found response
func (o *LookupDomainNotFound) WithPayload(payload *models.UtilsHTTPError) *LookupDomainNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the lookup domain not found response
func (o *LookupDomainNotFound) SetPayload(payload *models.UtilsHTTPError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LookupDomainNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
