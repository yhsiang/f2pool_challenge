// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// QueriesHistoryHandlerFunc turns a function with the right signature into a queries history handler
type QueriesHistoryHandlerFunc func(QueriesHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn QueriesHistoryHandlerFunc) Handle(params QueriesHistoryParams) middleware.Responder {
	return fn(params)
}

// QueriesHistoryHandler interface for that can handle valid queries history params
type QueriesHistoryHandler interface {
	Handle(QueriesHistoryParams) middleware.Responder
}

// NewQueriesHistory creates a new http.Handler for the queries history operation
func NewQueriesHistory(ctx *middleware.Context, handler QueriesHistoryHandler) *QueriesHistory {
	return &QueriesHistory{Context: ctx, Handler: handler}
}

/*
	QueriesHistory swagger:route GET /v1/history history queriesHistory

# List queries

List queries
*/
type QueriesHistory struct {
	Context *middleware.Context
	Handler QueriesHistoryHandler
}

func (o *QueriesHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewQueriesHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
