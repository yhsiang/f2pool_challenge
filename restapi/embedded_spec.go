// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "Implementation for the interview challenge",
    "title": "Interview challenge",
    "contact": {},
    "version": "1.0"
  },
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "description": "root endpoint",
        "produces": [
          "application/json"
        ],
        "tags": [
          "root"
        ],
        "summary": "root endpoint",
        "operationId": "root",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.RootResponse"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/history": {
      "get": {
        "description": "List queries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "history"
        ],
        "summary": "List queries",
        "operationId": "queries_history",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.Query"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/tools/lookup": {
      "get": {
        "description": "Lookup domain and return all IPv4 addresses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tools"
        ],
        "summary": "Lookup domain",
        "operationId": "lookup_domain",
        "parameters": [
          {
            "type": "string",
            "description": "Domain name",
            "name": "domain",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Query"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/tools/validate": {
      "post": {
        "description": "Simple IP valication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tools"
        ],
        "summary": "Simple IP validation",
        "operationId": "validate_ip",
        "parameters": [
          {
            "description": "IP to validate",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handler.ValidateIPRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.ValidateIPResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "handler.RootResponse": {
      "type": "object",
      "properties": {
        "date": {
          "type": "integer"
        },
        "kubernetes": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "handler.ValidateIPRequest": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        }
      }
    },
    "handler.ValidateIPResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "model.Address": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        }
      }
    },
    "model.Query": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Address"
          }
        },
        "client_ip": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "domain": {
          "type": "string"
        }
      }
    },
    "utils.HTTPError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "Implementation for the interview challenge",
    "title": "Interview challenge",
    "contact": {},
    "version": "1.0"
  },
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "description": "root endpoint",
        "produces": [
          "application/json"
        ],
        "tags": [
          "root"
        ],
        "summary": "root endpoint",
        "operationId": "root",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.RootResponse"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/history": {
      "get": {
        "description": "List queries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "history"
        ],
        "summary": "List queries",
        "operationId": "queries_history",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/model.Query"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/tools/lookup": {
      "get": {
        "description": "Lookup domain and return all IPv4 addresses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tools"
        ],
        "summary": "Lookup domain",
        "operationId": "lookup_domain",
        "parameters": [
          {
            "type": "string",
            "description": "Domain name",
            "name": "domain",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/model.Query"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/tools/validate": {
      "post": {
        "description": "Simple IP valication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "tools"
        ],
        "summary": "Simple IP validation",
        "operationId": "validate_ip",
        "parameters": [
          {
            "description": "IP to validate",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handler.ValidateIPRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/handler.ValidateIPResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/utils.HTTPError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "handler.RootResponse": {
      "type": "object",
      "properties": {
        "date": {
          "type": "integer"
        },
        "kubernetes": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "handler.ValidateIPRequest": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        }
      }
    },
    "handler.ValidateIPResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "model.Address": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        }
      }
    },
    "model.Query": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Address"
          }
        },
        "client_ip": {
          "type": "string"
        },
        "created_at": {
          "type": "integer"
        },
        "domain": {
          "type": "string"
        }
      }
    },
    "utils.HTTPError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}`))
}
